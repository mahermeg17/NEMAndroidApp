apply plugin: 'com.android.application'


buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.5'
    }
}

android {
    compileSdkVersion 27
    tasks.whenTaskAdded { task ->
        switch (task.name) {
            case "compileDemoDebugSources":
            case "compileDemoReleaseSources":
                task.dependsOn buildDemoApp
                break;
            default:
                if (task.name.matches(~/^compile.+(Debug|Release)Sources$/)) {
                    task.dependsOn buildDevApp
                }
                break
        }
    }
    String versionNameStr = getVersionName()
    defaultConfig {
        applicationId "org.nem.nac.mainnet"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName versionNameStr
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            versionNameSuffix "-debug"
        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    flavorDimensions "dev", "demo"

    productFlavors {
        dev {
            dimension "dev"
        }
        demo {
            dimension "demo"
        }
    }
    dexOptions {
        jumboMode = true
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:multidex:1.0.2'
    compile 'com.annimon:stream:1.0.5'
    compile 'com.jakewharton.timber:timber:4.1.0'
    compile 'com.madgag.spongycastle:prov:1.51.0.0'
    compile 'com.android.support:appcompat-v7:27.0.2'
    compile 'com.android.support:design:27.0.2'
    compile 'com.android.support:support-v4:27.0.2'
    compile 'com.google.zxing:core:3.2.1'
    compile 'nl.qbusict:cupboard:2.1.4'
    compile 'com.squareup.okhttp:okhttp:2.3.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.6.4'
    compile 'com.madgag.spongycastle:core:1.51.0.0'
    compile 'commons-codec:commons-codec:1.10'
    compile 'ch.acra:acra:4.9.0'
    compile 'org.mindrot:jbcrypt:0.3m'
}

/**
 * Custom staff
 */
def bumpVersion( boolean bumpProduction) {
    def PROP_MAJOR = 'version-major',
        PROP_MINOR = 'version-minor',
        PROP_PRODUCTION = 'production-build'
     File versionFile = file('version.properties')
    if (!versionFile.exists()) {
        if (!versionFile.createNewFile()) {
            throw new IOException("Failed to create version file")
        }
    }

    if (versionFile.canRead()) {
         Properties props = new Properties()
        props.load(versionFile.newReader("UTF-8"))
        def versionMajor = props.getProperty(PROP_MAJOR, "0").toInteger()
        def versionMinor = props.getProperty(PROP_MINOR, "0").toInteger()
        def versionProduction = props.getProperty(PROP_PRODUCTION, "0").toInteger()
        if (bumpProduction) {
            versionProduction++
        }
        props.setProperty(PROP_MAJOR, versionMajor.toString())
        props.setProperty(PROP_MINOR, versionMinor.toString())
        props.setProperty(PROP_PRODUCTION, versionProduction.toString())
        props.store(versionFile.newWriter("UTF-8"), "Application version information. Managed by Gradle")
    }
}

String getVersionName() {
    def PROP_MAJOR = 'version-major',
        PROP_MINOR = 'version-minor',
        PROP_PRODUCTION = 'production-build'
    File versionFile = file('version.properties')
    if (!versionFile.exists()) {
        if (!versionFile.createNewFile()) {
            throw new IOException("Failed to create version file!")
        }
    }
    if (versionFile.canRead()) {
         Properties props = new Properties()
        props.load(versionFile.newReader("UTF-8"))
        def versionMajor = props.getProperty(PROP_MAJOR, "0")
        def versionMinor = props.getProperty(PROP_MINOR, "0")
        def versionProduction = props.getProperty(PROP_PRODUCTION, "0").toInteger()

        return versionMajor + "." + versionMinor + "." + versionProduction + " BETA Mainnet"
    } else {
        throw new IOException("Failed to read version file!")
    }
}

task buildDevApp << {
    bumpVersion(false)
    setApkName()
}

task buildDemoApp << {
    bumpVersion(true)
    android.defaultConfig.versionName = getVersionName()
    setApkName()
}

def setApkName() {
    android.applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            variant.outputs.each { output ->
                output.outputFile = new File(
                        output.outputFile.parent,
                        output.outputFile.name
                                .replace("app-", "NEM-")
                                .replace(".apk", "_v${android.defaultConfig.versionName}.apk"))
            }
        }
    }
}
